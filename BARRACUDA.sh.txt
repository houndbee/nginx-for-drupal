#!/bin/bash


###----------------------------------------###
###
###  Barracuda Aegir Installer
###  Copyright 2010 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###  This script is free software licensed
###  under the GNU GPLv3. No warranty is
###  provided and the authors claims no
###  responsibility for any disasters caused
###  during the execution of this script.
###
###  Code: http://github.com/omega8cc
###
###----------------------------------------###


###----------------------------------------###
### HOW-TO: run it with bash, not with sh  ###
###----------------------------------------###
###
### $ bash BARRACUDA.sh.txt
###


###----------------------------------------###
### EDITME                                 ###
###----------------------------------------###
###
### Enter your valid e-mail address below.
###
_MY_EMAIL="support@omega8.cc"


###----------------------------------------###
### AEGIR VERSION                          ###
###----------------------------------------###
###
### By default the latest release will be
### installed, but if you are brave and want
### to test current HEAD, you can change it
### below to:
###
### _AEGIR_VERSION=HEAD
### _AEGIR_VERSION=0.4-alpha14
###
_AEGIR_VERSION=0.4-alpha14


###----------------------------------------###
### DNS MANUAL CONFIG - AVOID USING IT     ###
###----------------------------------------###
###
### Starting with release 0.4-alpha9 Aegir
### requires proper DNS configuration
### of your server. Your hostname has to be
### FQDN and has to match your server IP.
###
### This script is trying to discover your
### DNS details and allow or deny the install,
### if something doesn't look correct.
###
### This script will also use your FQDN
### hostname as a web address of your Aegir
### frontend (control panel).
###
### You can try to change the automatic
### defaults by setting up your IP address,
### your FQDN hostname and your Aegir frontend
### web address below.
###
### It can be useful when you are using local
### environment with custom settings in your
### /etc/hosts, when you have more than one
### public IPs on eth0 and you wish to use
### non-default (first) IP address, or when
### you want to use non-hostname (sub)domain
### to access your Aegir frontend.
###
### Please change all 3 values if you wish
### to customize this automatic setup.
###
### Example:
###
### _MY_OWNIP=192.168.0.108
### _MY_HOSTN=server.mydomain.com
### _MY_FRONT=aegir.mydomain.com
###
### NOTE:
###
### If you will use your custom DNS settings,
### they will be still validated, therefore
### make sure your _MY_HOSTN and _MY_FRONT
### both matches your _MY_OWNIP or the script
### will fail to install Aegir.
###
### You can't use "localhost" as your
### _MY_HOSTN and/or _MY_FRONT, because
### there is already default Nginx host
### with this name in every vanilla install
### and we don't want to override it.
###
_MY_OWNIP=""
_MY_HOSTN=""
_MY_FRONT=""


###----------------------------------------###
### DNS SETUP TEST                         ###
###----------------------------------------###
###
### If you don't want to test your DNS
### because of some custom local setup
### you know is correct (like DynDNS)
### but the script can't validate it with its
### standard ifconfig tests, set this to:
###
### _DNS_SETUP_TEST=NO
###
### There is no guarantee it will work.
###
_DNS_SETUP_TEST=YES


###----------------------------------------###
### SMTP CONNECTION TEST                   ###
###----------------------------------------###
###
### If you don't want to test outgoing SMTP
### connections, change _SMTP_RELAY_TEST
### value to "NO".
###
_SMTP_RELAY_TEST=YES


###----------------------------------------###
### SMTP RELAY HOST - ONLY WHEN REQUIRED   ###
###----------------------------------------###
###
### _SMTP_RELAY_HOST="smtp.cust.voxel.net"
###
_SMTP_RELAY_HOST=""


###----------------------------------------###
### DON'T EDIT ANYTHING BELOW THIS LINE    ###
###----------------------------------------###

_INSTALLER_VERSION=A14.B
_NGINX_VERSION=0.8.50
_PHP_VERSION=5.2.14
_DRUSH_VERSION=6.x-3.3

###---### Avoid too many questions
#
export DEBIAN_FRONTEND=noninteractive
#
###---### Functions
#
# Noticeable messages
msg () {
  echo "==> $*"
}
# Simple prompt
prompt_yes_no () {
  while true ; do
    printf "$* [Y/n] "
    read answer
    if [ -z "$answer" ] ; then
      return 0
    fi
    case $answer in
      [Yy]|[Yy][Ee][Ss])
        return 0
        ;;
      [Nn]|[Nn][Oo])
        return 1
        ;;
      *)
        echo "Please answer yes or no"
        ;;
    esac
 done 
}
#
# Stop on error
# set -e ### disable this for debugging
#
# Success msg
success () {
	msg "$1 Succeeded."
}
#
# Error msg
fatal () {
	echo
	msg "Fatal Error Occurred: $1"
	msg "Cannot continue installation."
	exit 1
}
#
# Not supported OS
not_supported_os () {
    msg "== FATAL ERROR =="
    msg "Invalid install script or OS used."
    msg "It is not any supported Ubuntu or Debian version. Sorry."
    msg "You need Debian (Lenny) or Ubuntu (Lucid or Karmic or Jaunty)."
    msg "Ciao... :)"
    exit 1
}
#
# Perform an action, log it, and run the spinner throughout
runner () {
	CMD="$1"
	touch busy
	bash $_SRCDIR/spinner busy &
	if $CMD >> $_LOG; then
		rm busy
		sleep 1
		success "$CMD:"
		return 0
	else
		rm busy
		sleep 1
		echo "$CMD failed.  Error (if any): $?"
		echo
		echo "Displaying the last 15 lines of $_LOG to help troubleshoot this problem."
		echo "If you see any error with advice to run 'dpkg --configure -a', run this"
		echo "command first and choose default answer, then run this installer again."
		echo " "
		tail -15 $_LOG
		return 1
	fi
}
#
# Small spinner
mrun () {
	CMD="$1"
	touch busy
	bash $_SRCDIR/spinner busy &
	if $CMD >> $_LOG; then
		rm busy
		sleep 1
		return 0
	fi
}
#
# Silent runner
st_runner () {
	CMD="$1"
	touch busy
	bash $_SRCDIR/spinner busy &
	if $CMD >> $_LOG; then
		rm busy
		sleep 1
		success "$CMD:"
		return 0
	else
		rm busy
		sleep 1
		echo "$CMD failed.  Error (if any): $?"
		echo
		echo "Displaying the last 15 lines of $_LOG to help troubleshoot this problem."
		echo "If you see any error with advice to run 'dpkg --configure -a', run this"
		echo "command first and choose default answer, then run this installer again."
		echo " "
		tail -15 $_LOG
		return 1
	fi
}


###--------------------###
if [ `whoami` = "root" ] ; then
  msg "STATUS: This script is ran as a root user."
  rm -f -r /opt/tmp/*
  invoke-rc.d cron stop &> /dev/null
else
  msg "ERROR: This script should be ran as a root user, please `su - root` or `sudo -i` first."
  exit 1
fi


###--------------------###
msg "`date` INFO: Install or upgrade checking, please wait..."
sleep 3
if [ -d "/var/aegir" ] ; then
  _STATUS=UPGRADE
  msg "`date` INFO: UPGRADE..."
else
  _STATUS=INIT
  msg "`date` INFO: INIT..."
fi
INITINS="/usr/bin/apt-get -y --force-yes install"
INSTALL="/usr/bin/apt-get --config-file /opt/tmp/apt.conf.noninteractive -y --force-yes install"
_SRCDIR=/opt/tmp/files
rm -f -r /var/opt/*
mkdir -p $_SRCDIR
chmod -R 777 /opt/tmp


###--------------------###
if [ $_STATUS = "UPGRADE" ] ; then
  if [ ! -f "/root/.my.cnf" ] ; then
  msg "EXIT on error due to not found file with your MySQL/MariaDB root password."
cat <<EOF
  
  It appears you don't have required file with your root sql password.
  Create this file first and run this script again:
  
    echo "[client]" > /root/.my.cnf
    echo "user=root" >> /root/.my.cnf
    echo "password=your_SQL_ROOT_password" >> /root/.my.cnf
    chmod 0600 /root/.my.cnf
    
EOF
  msg "EXIT on error due to not found file with your MySQL/MariaDB root password."
  echo " "
  exit 1
  fi
fi


###--------------------###
if [ $_STATUS = "INIT" ] ; then
  msg "`date` INFO: We need to install wget & git first, please wait..."
  sleep 3
  apt-get update &> /dev/null
  $INITINS locales &> /dev/null
  sleep 5
  _LOC_TEST=`locale 2>&1`
  if [[ $_LOC_TEST =~ Cannot ]] ; then
    _LOCALE_TEST=BROKEN
  msg "WARNING!"
cat <<EOF
  
  Locales on this system are broken or not installed
  and/or not configured correctly yet. This is "default"
  issue at Linode and RackSpaceCloud (and maybe others).
  
  We will fix this problem for you now, so you shouldn't
  use any tricks to change system/ssh settings before
  running this Barracuda installer.
  
  You can experience problems if your SSH client
  forces locales other than en_US.UTF-8 we are using by default.
  
  You should log out when Barracuda will finish all its tasks
  and display last line with "BYE!" and then log in again
  to see the result (and possibly run Octopus installer).
  
  We will continue in 30 seconds...
  
EOF
sleep 30
    locale-gen en_US en_US.UTF-8 &> /dev/null
    update-locale &> /dev/null
    localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 &> /dev/null
    echo "LANG=en_US.UTF-8" > /etc/default/locale
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
    export LANGUAGE=en_US.UTF-8
    echo "export LANG=en_US.UTF-8" >> /root/.bashrc
    echo "export LC_ALL=en_US.UTF-8" >> /root/.bashrc
    echo "export LANGUAGE=en_US.UTF-8" >> /root/.bashrc
  else
    _LOCALE_TEST=OK
    locale-gen en_US en_US.UTF-8 &> /dev/null
  fi
  $INITINS wget git-core &> /dev/null
fi


###--------------------###
if [ -d "/usr/share/git-core" ] ; then
  msg "`date` INFO: Fix for possibly broken git-core after upgrade to version: 1:1.5.6.5-3+lenny3.1"
  sleep 3
  chmod 644 /usr/share/git-core/templates/description 
  chmod 644 /usr/share/git-core/templates/hooks/* 
  chmod 644 /usr/share/git-core/templates/info/* 
fi


###--------------------###
msg "`date` INFO: Downloading little helpers, please wait..."
sleep 3
#
# Git clone all
cd /opt/tmp
rm -f -r /opt/tmp/nginx-for-drupal
git clone git://github.com/houndbee/nginx-for-drupal.git &> /dev/null
#
# Get apt helper
rm -f apt.conf.noninteractive*
cp -af /opt/tmp/nginx-for-drupal/aegir/helpers/apt.conf.noninteractive ./
#
# Create tmp stuff
_LOG=/opt/tmp/aegir-install.log
_SILENT=/opt/tmp/silent.log
cd $_SRCDIR
#
# Get spinner
rm -f spinner*
cp -af /opt/tmp/nginx-for-drupal/aegir/helpers/spinner ./
chmod +x spinner
#


###--------------------###
if [ $_STATUS = "INIT" ] ; then
  msg "`date` INFO: Installing lsb-release / dnsutils now, please wait..."
  mrun "sleep 3"
  if ! runner "$INSTALL lsb-release dnsutils"; then
    fatal "Installation failed: $?"
  fi
fi


###--------------------###
msg "STATUS: Checking your Debian or Ubuntu version..."
mrun "sleep 3"
_THIS_OS=`lsb_release -si`
_THIS_RV=`lsb_release -sc`
if [ $_THIS_OS = "Ubuntu" ] ; then
  if [ $_THIS_RV = "lucid" ] ; then
    _REL_VERSION="lucid"
  elif [ $_THIS_RV = "karmic" ] ; then
    _REL_VERSION="karmic"
  elif [ $_THIS_RV = "jaunty" ] ; then
    _REL_VERSION="jaunty"
  elif [ $_THIS_RV = "hardy" ] ; then
    _REL_VERSION="hardy"
  else
    not_supported_os
  fi
elif [ $_THIS_OS = "Debian" ] ; then
  if [ $_THIS_RV = "lenny" ] ; then
    _REL_VERSION="lenny"
  else
    not_supported_os
  fi
else
  not_supported_os
fi
echo " "
msg "Aegir v.$_AEGIR_VERSION with Nginx on $_THIS_OS/$_REL_VERSION - highly automated install script."
echo " "
mrun "sleep 3"
	

###--------------------###
if [ $_STATUS = "INIT" ] ; then
if [ -e "/proc/bean_counters" ] ; then
   _VMFAMILY="VZ"
   _IFCONFIG="venet0:0"
else
   _VMFAMILY="XEN"
   _IFCONFIG="eth0"
fi
if [ ! -z "$_MY_OWNIP" ] ; then
   if [ ! -z "$_MY_HOSTN" ] ; then
     hostname -v $_MY_HOSTN ### force our custom FQDN hostname
   fi
   _THISHTIP="$_MY_OWNIP"
   _THISHOST="$_MY_HOSTN"
   _THISRDIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
   if [ "$_THISRDIP" = "$_THISHTIP" ] ; then
      _FQDNTEST="TRUE"
      _THEFRDIP=`host $_MY_FRONT | cut -d: -f2 | awk '{ print $4}'`
      if [ "$_THEFRDIP" = "$_THISHTIP" ] ; then
         _TESTHOST=`hostname -f`
         _TESTRDIP=`host $_TESTHOST | cut -d: -f2 | awk '{ print $4}'`
         if [ "$_TESTRDIP" = "$_THISHTIP" ] ; then
            _FQDNTEST="TRUE"
            hostname -v $_TESTHOST
         else
            _FQDNTEST="FALSE"
         fi
      else
         _FQDNTEST="FALSE"
      fi
   else
      _FQDNTEST="FALSE"
   fi
else
_THISHTIP=`ifconfig $_IFCONFIG | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'`
_FQDNPROB=`hostname -f 2> /dev/null`
_FQDNTEST="FALSE"
_THISHOST=`uname -n`
if [ ! -z "$_FQDNPROB" ] ; then
   _THISHOST=`hostname -f`
   _THISRDIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
   if [ "$_THISRDIP" = "$_THISHTIP" ] ; then
      _FQDNTEST="TRUE"
      hostname -v $_THISHOST
   else
      _FQDNTEST="FALSE"
      _REVHOSTN=`host $_THISHTIP | cut -d: -f2 | awk '{ print $5}'`
      _REVHOSTN=`echo -n $_REVHOSTN |sed 's/\(.*\)./\1/'`
      _REVHSTIP=`host $_REVHOSTN | cut -d: -f2 | awk '{ print $4}'`
      if [ "$_REVHSTIP" = "$_THISHTIP" ] ; then
         hostname -v $_REVHOSTN
         _THISHOST="$_REVHOSTN"
         _FQDNTEST="TRUE"
      else
         _FQDNTEST="FALSE"
      fi
   fi
else
   _REVHOSTN=`host $_THISHTIP | cut -d: -f2 | awk '{ print $5}'`
   _REVHOSTN=`echo -n $_REVHOSTN |sed 's/\(.*\)./\1/'`
   _REVHSTIP=`host $_REVHOSTN | cut -d: -f2 | awk '{ print $4}'`
   if [ "$_REVHSTIP" = "$_THISHTIP" ] ; then
      hostname -v $_REVHOSTN
      _THISHOST="$_REVHOSTN"
      _FQDNTEST="TRUE"
   else
      _FQDNTEST="FALSE"
   fi
fi
fi
if [ ! -z "$_MY_FRONT" ] ; then
  _THIS_FRONT="$_MY_FRONT"
else
  _THIS_FRONT="$_THISHOST"
fi
if [ "$_DNS_SETUP_TEST" = "NO" ] ; then
  _FQDNTEST=TRUE
fi
if [ "$_FQDNTEST" = "FALSE" ] ; then
echo " "
msg "EXIT on error due to invalid DNS setup."
if [ ! -z "$_MY_OWNIP" ] ; then
cat <<EOF
   
  * Your custom _MY_OWNIP is set to "$_MY_OWNIP"
  * Your custom _MY_HOSTN is set to "$_MY_HOSTN"
  * Your custom _MY_FRONT is set to "$_MY_FRONT"
  
  * Your _MY_HOSTN and/or _MY_FRONT doesn't match your _MY_OWNIP,
    or your hostname is not set properly yet.
    
  * Please add/check correct line in your /etc/hosts file on the server:
    
    $ echo "$_MY_OWNIP $_MY_HOSTN $_MY_FRONT" >> /etc/hosts

  * Please make sure that below command returns your FQDN hostname "$_MY_HOSTN":
    
    $ hostname -f
    
EOF
fi
cat <<EOF
   
  * Your server has to have already working FQDN hostname matching your IP address.
    This means you _have to_ configure the dns for your server IP/hostname _before_
    trying to use this install script. Reverse dns is _not_ required.
   
  * Your hostname appears to be $_THISHOST - are you sure it's a valid FQDN hostname?
  
  * Are you sure your FQDN hostname matches your IP address: $_THISHTIP?
    
EOF
msg "EXIT on error due to invalid DNS setup."
echo " "
exit 1
else
echo "$_THISHOST" > /etc/hostname
hostname -v $_THISHOST
msg "DNS test OK - your FQDN hostname is $_THISHOST and it matches your IP $_THISHTIP"
msg "Please double check whether this is a valid result of my test."
fi
mrun "sleep 3"
echo " "
msg "INSTALL START -> checkpoint: "
cat <<EOF

  * Your e-mail address appears to be $_MY_EMAIL - is that correct?
  * Your IP address appears to be $_THISHTIP - are you sure it's a valid IP?
  * Your hostname appears to be $_THISHOST - are you sure it's a valid FQDN hostname?

  NOTE: If your outgoing SMTP requires using relayhost, define first _SMTP_RELAY_HOST.

  * Your core Aegir instance control panel will be available at http://$_THIS_FRONT.
  * Your (optional) MultiCore Apache Solr Tomcat will listen on localhost:8080.
  * Your (optional) Chive MariaDB Manager will be available at http://db.$_THIS_FRONT.
  * Your (optional) Collectd Graph Panel will be available at http://cgp.$_THIS_FRONT.
  
  NOTE: Chive and Collectd will work only if db. and cgp. subdomains point to your IP.
        But don't worry, you can add proper DNS entries for those subdomains later,
        if you didn't enable wildcard DNS yet. Barracuda can install it now, anyway.

EOF
echo " "
if prompt_yes_no "Do you want to proceed with the install?" ; then
  true
else
  echo "Installation aborted by you."
  exit 1
fi
else ### if [ $_STATUS = "UPGRADE" ] ; then
  _THISHOST=`cat /etc/hostname`
  _THISHOST=`echo -n $_THISHOST | tr -d "\n"`
  if [ -f "/var/aegir/.drush/hostmaster.alias.drushrc.php" ] ; then
    _THIS_FRONT=`cat /var/aegir/.drush/hostmaster.alias.drushrc.php | grep 'uri' | cut -d: -f2 | awk '{ print $3}'`
    _THIS_FRONT=`echo $_THIS_FRONT | sed "s/[\,']//g"`
  elif [ ! -z "$_MY_FRONT" ] ; then
    _THIS_FRONT="$_MY_FRONT"
  else
    msg "EXIT on error due to not found or not specified Aegir domain."
    msg "Please specify your previously working Aegir domain as a value of _MY_FRONT."
    echo " "
    exit 1
  fi
  mrun "sleep 3"
  echo " "
  msg "UPGRADE START -> checkpoint: "
cat <<EOF

    * Your e-mail address appears to be $_MY_EMAIL - is that correct?
    * Your server hostname is $_THISHOST.
    * Your Aegir control panel is/will be available at http://$_THIS_FRONT.
    
EOF
  echo " "
  if prompt_yes_no "Do you want to proceed with the upgrade?" ; then
    true
  else
    echo "Upgrade aborted by you."
    exit 1
  fi
fi


###--------------------###
msg "`date` INFO: Clean up temp files in /var/opt/"
mrun "sleep 3"
rm -f -r /var/opt/*
mkdir -p /var/log/php
chmod 777 /var/log/php*


###--------------------###
#if [ $_STATUS = "INIT" ] ; then
  msg "`date` INFO: Update apt sources"
  mrun "sleep 3"
  if [ "$_THIS_OS" = "Ubuntu" ] ; then
    echo "## MAIN REPOSITORIES" > /etc/apt/sources.list
    echo "deb http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION main restricted universe multiverse" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## MAJOR BUG FIX UPDATES produced after the final release" >> /etc/apt/sources.list
    echo "deb http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-updates main restricted universe multiverse" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## UBUNTU SECURITY UPDATES" >> /etc/apt/sources.list
    echo "deb http://security.ubuntu.com/ubuntu $_REL_VERSION-security main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://security.ubuntu.com/ubuntu $_REL_VERSION-security main restricted universe multiverse" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## BACKPORTS REPOSITORY" >> /etc/apt/sources.list
    echo "deb http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-backports main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://us.archive.ubuntu.com/ubuntu/ $_REL_VERSION-backports main restricted universe multiverse" >> /etc/apt/sources.list
    echo "" >> /etc/apt/sources.list
    echo "## PROPOSED REPOSITORY" >> /etc/apt/sources.list
    echo "deb http://archive.ubuntu.com/ubuntu $_REL_VERSION-proposed main restricted universe multiverse" >> /etc/apt/sources.list
    echo "deb-src http://archive.ubuntu.com/ubuntu $_REL_VERSION-proposed main restricted universe multiverse" >> /etc/apt/sources.list
  elif [ "$_THIS_OS" = "Debian" ] ; then
    echo "deb http://ftp.us.debian.org/debian/ $_REL_VERSION main contrib non-free" > /etc/apt/sources.list
    echo "deb-src http://ftp.us.debian.org/debian/ $_REL_VERSION main contrib non-free" >> /etc/apt/sources.list
    echo "deb http://security.debian.org/ $_REL_VERSION/updates main" >> /etc/apt/sources.list
    echo "deb-src http://security.debian.org/ $_REL_VERSION/updates main" >> /etc/apt/sources.list
  fi
#fi


###--------------------###
if [ $_STATUS = "INIT" ] ; then
  msg "`date` INFO: Add apt sources for MariaDB"
  mrun "sleep 3"
  cd /var/opt
  wget -U iCab http://ourdelta.org/deb/ourdelta.gpg &> /dev/null
  apt-key add ourdelta.gpg 2> /dev/null
  wget -U iCab http://ourdelta.org/deb/sources/$_REL_VERSION-mariadb-ourdelta.list &> /dev/null
  cp -af $_REL_VERSION-mariadb-ourdelta.list /etc/apt/sources.list.d/ourdelta.list &> /dev/null
fi


###--------------------###
msg "`date` INFO: Run apt update, please wait..."
runner "aptitude update"
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  runner "apt-get upgrade -y"
  runner "aptitude update"
  runner "aptitude clean"
  runner "apt-get dist-upgrade"
  runner "apt-get autoclean"
elif [ "$_THIS_OS" = "Debian" ] ; then
  runner "aptitude safe-upgrade -y"
  runner "aptitude update"
  runner "aptitude clean"
  runner "aptitude full-upgrade -y"
fi


###--------------------###
msg "`date` INFO: Run apt update again, please wait..."
runner "aptitude update"
runner "aptitude clean"
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  runner "apt-get upgrade -y"
  runner "apt-get dist-upgrade"
  runner "apt-get autoclean"
elif [ "$_THIS_OS" = "Debian" ] ; then
  runner "aptitude full-upgrade -y"
fi


###--------------------###
msg "`date` INFO: Run apt update again, please wait..."
runner "aptitude update"
runner "aptitude clean"
if [ "$_THIS_OS" = "Ubuntu" ] ; then
  runner "apt-get upgrade -y"
  runner "apt-get dist-upgrade"
  runner "apt-get autoclean"
elif [ "$_THIS_OS" = "Debian" ] ; then
  runner "aptitude full-upgrade -y"
fi


###--------------------###
msg "`date` INFO: Install/upgrade required libraries and tools"
msg "`date` NOTE: This step can take a few minutes (depending on your server speed), please wait..."
if [ "$_THIS_OS" = "Debian" ] ; then
  DEBDEPS="apticron aptitude autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config ghostscript gnupg imagemagick htop ifstat iptables lemon libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano netcat nginx ncurses-dev openjdk-6-jdk postfix postfix-pcre pwgen python-dev python-mysqldb re2c rsync shtool ssh ssl-cert subversion sudo sysstat sysvconfig t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra vim whois xml-core xml2 zlib1g-dev zlibc unzip zip"
elif [ "$_REL_VERSION" = "lucid" ] ; then
  DEBDEPS="apticron aptitude autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config ghostscript gnupg imagemagick htop ifstat iptables libapr1 lemon libaprutil1 libc-client-dev libc-client2007e libc-client2007e-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-0 libpng12-dev libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano netcat ncurses-dev nginx openjdk-6-jdk postfix postfix-pcre pwgen python-dev python-mysqldb re2c redis-server rsync shtool ssh ssl-cert subversion sudo sysstat sysvinit-utils t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra unzip vim whois xml-core xml2 zip zlib1g-dev zlibc"
else
  DEBDEPS="apticron aptitude autoconf2.13 automake automake1.4 autotools-dev bc bison build-essential cron curl cvs defoma devscripts dnsutils dstat flex fontconfig-config ghostscript gnupg imagemagick htop ifstat iptables lemon libapr1 libaprutil1 libc-client-dev libc-client2007b libc-client2007b-dev libcurl4-gnutls-dev libdbd-mysql-perl libdbi-perl libfilesys-diskspace-perl libfontconfig1 libfreetype6 libfreetype6-dev libfribidi0 libgd2-xpm libhtml-template-perl libjpeg-dev libjpeg62 libmariadbclient-dev libmariadbclient16 libmariadbd-dev libmcrypt-dev libmemcache-dev libnet-daemon-perl libpcre3 libpcre3-dev libplrpc-perl libpng12-dev libpng12-0 libpq5 libsasl2-modules libssl-dev libt1-5 libt1-dev libtool libwww-perl libxml2-dev libxpm4 libxslt-dev libxslt1-dbg libxslt1-dev libxslt1.1 lftp m4 makepasswd mariadb-client-5.1 mariadb-common mariadb-server-5.1 mc mcrypt nano netcat nginx ncurses-dev openjdk-6-jdk postfix postfix-pcre pwgen python-dev python-mysqldb re2c redis-server rsync shtool ssh ssl-cert subversion sudo sysstat sysvinit-utils t1lib-bin telnet time ttf-dejavu ttf-dejavu-core ttf-dejavu-extra vim whois xml-core xml2 zlib1g-dev zlibc unzip zip"
fi
install_with_apt () {
	if ! runner "$INSTALL $DEBDEPS"; then
		fatal "Installation failed: $?"
	fi
	return 0
}
install_with_apt


###--------------------###
if [ "$_THIS_OS" = "Debian" ] ; then
  msg "`date` INFO: Fix for broken git-core after upgrade to version: 1:1.5.6.5-3+lenny3.1 on Lenny 32bit"
  mrun "sleep 3"
  chmod 644 /usr/share/ogit-core/templates/description 
  chmod 644 /usr/share/git-core/templates/hooks/* 
  chmod 644 /usr/share/git-core/templates/info/* 
fi


###--------------------###
if [ "$_SMTP_RELAY_TEST" = "YES" ] ; then
msg "`date` INFO: SMTP check"
mrun "sleep 3"
if ! netcat -w 8 -z smtp.host8.biz 25 ; then
  WE_NEED_RELAY="YES"
cat <<EOF

  Your outgoing SMTP port 25 doesn't work
  as expected, so your server can't send out
  any e-mails directly.
  
  It appears you need a SMTP relayhost added
  in your Postfix /etc/postfix/main.cf config.
  
  Please enter your SMTP relay host name
  as a value for _SMTP_RELAY_HOST="smtp.your.relay.server"
  
  Then run this script again.
    
EOF
  exit 1
else
  true
fi
###
### required if you have closed outgoing smtp port and you have to use smtp relay
###
if [ ! -z "$_SMTP_RELAY_HOST" ]; then
  perl -p -i -e "s/($_SMTP_RELAY_HOST)//g" /etc/postfix/main.cf
  perl -p -i -e "s/(relayhost =)/relayhost = $_SMTP_RELAY_HOST/g" /etc/postfix/main.cf
  postfix reload &> /dev/null
fi
###
###
fi


###--------------------###
msg "`date` INFO: Fix for Nginx startup script, please wait..."
mrun "sleep 3"
_X_INIT_TEST=`cat /etc/init.d/nginx 2>&1`
if [[ $_X_INIT_TEST =~ Barracuda ]] ; then
  true
  msg "`date` INFO: No fix required"
else
  cd /etc/init.d
  mv -f /etc/init.d/nginx /var/backups/nginx-pre-$_INSTALLER_VERSION
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/nginx ./
  chmod 755 /etc/init.d/nginx
  msg "`date` INFO: Fix for Nginx startup script applied"
fi


###--------------------###
if [ ! -f "/usr/bin/redis-server" ] ; then
if [ "$_THIS_OS" = "Debian" ] ; then
  msg "`date` INFO: Installing Redis for Lenny, please wait..."
  mrun "sleep 3"
  runner "adduser --system --group redis"
  cd /var/opt
  rm -f -r /var/opt/redis*
  wget -U iCab http://redis.googlecode.com/files/redis-2.0.1.tar.gz &> /dev/null
  tar -xzf redis-2.0.1.tar.gz
  cd redis-2.0.1
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  cd /usr/local/bin
  cp -p redis-server /usr/bin/
  cp -p redis-benchmark /usr/bin/
  cp -p redis-cli /usr/bin/
  cp -p redis-check-dump /usr/bin/
  cp -p redis-check-aof /usr/bin/
  cd /etc/init.d
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/redis-server ./
  chmod 755 redis-server
  runner "update-rc.d redis-server defaults" &> /dev/null
  mkdir /etc/redis
  cd /etc/redis
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/redis.conf ./
  mkdir -p /var/log/redis
  chown redis:redis /var/log/redis
  mkdir -p /var/lib/redis
  chown redis:redis /var/lib/redis
  runner "invoke-rc.d redis-server start" 2> /dev/null
fi
fi


###--------------------###
msg "`date` INFO: Install/upgrade a few more tools, please wait..."
mrun "sleep 3"
cd /var
if [ -d "/var/xdrago" ] ; then
  cp -af /opt/etc/init.d /var/xdrago/log/init.d-pre-$_INSTALLER_VERSION
  cp -af /var/spool/cron/crontabs/root /var/xdrago/log/cron-root-pre-$_INSTALLER_VERSION
  touch /var/xdrago/log/cron-root-pre-$_INSTALLER_VERSION
  cp -af /var/xdrago /var/xdrago-pre-$_INSTALLER_VERSION
fi
if [ $_STATUS = "INIT" ] ; then
  mkdir -p ./xdrago
  cp -af /opt/tmp/nginx-for-drupal/aegir/tools/auto-healing-monitoring/* ./xdrago/
  cp -af /var/xdrago/etc /opt/
  cp -af /opt/etc/init.d/* /etc/init.d/
  cp -af /var/xdrago/cron/crontabs/root /var/spool/cron/crontabs/
  perl -p -i -e "s/(>127.0.0.1<)/\>127.0.0.1,$_THISHTIP\</g" /opt/etc/php-fpm.conf
  perl -p -i -e "s/(max_children\">1)/max_children\"\>4/g" /opt/etc/php-fpm.conf
fi
if [ $_STATUS = "INIT" ] ; then
  echo $_MY_EMAIL > /opt/tmp/.email.txt
  perl -p -i -e "s/(\@)/\\\@/g" /opt/tmp/.email.txt
  APTEMAIL=`cat /opt/tmp/.email.txt`
  APTEMAIL=`echo -n $APTEMAIL | tr -d "\n"`
  perl -p -i -e "s/(root)/$APTEMAIL/g" /etc/apticron/apticron.conf
  rm -f /opt/tmp/.email.txt
  echo $_MY_EMAIL > /opt/tmp/.xemail.txt
  perl -p -i -e "s/(\@)/\\\\\@/g" /opt/tmp/.xemail.txt
  XPTEMAIL=`cat /opt/tmp/.xemail.txt`
  XPTEMAIL=`echo -n $XPTEMAIL | tr -d "\n"`
  sed -i "s/help\\\@omega8.cc/$XPTEMAIL/g" /var/xdrago/checksql.cgi
  rm -f /opt/tmp/.xemail.txt
  runner "sh /usr/sbin/apticron"
fi
if [ -d "/var/xdrago-pre-$_INSTALLER_VERSION" ] ; then
  cp -af /var/xdrago-pre-$_INSTALLER_VERSION/run* /var/xdrago/
fi
chmod 700 /var/xdrago/*
chmod 700 /var/xdrago


###--------------------###
msg "`date` INFO: PHP installed version auto-discovering now, please wait..."
mrun "sleep 3"
if [ -f "/usr/local/bin/php" ] ; then
  _PHP_INSTALLED=`/usr/local/bin/php -v | grep 'PHP 5' | cut -d: -f1 | awk '{ print $2}'`
  if [ "$_PHP_INSTALLED" = "$_PHP_VERSION" ] ; then
    _PHP_INSTALL_REQUIRED=NO
    msg "`date` INFO: Installed PHP version $_PHP_INSTALLED, no upgrade required"
  else
    _PHP_INSTALL_REQUIRED=YES
    msg "`date` INFO: Installed PHP version $_PHP_INSTALLED, upgrade required"
  fi
  mrun "sleep 3"
else  
  _PHP_INSTALL_REQUIRED=YES
fi


###
if [ $_PHP_INSTALL_REQUIRED = "YES" ] ; then
###

###--------------------###
msg "`date` INFO: Installing libevent, please wait..."
rm -f -r /var/opt/libevent*
cd /var/opt
wget -U iCab http://www.monkey.org/~provos/libevent-1.4.14b-stable.tar.gz &> /dev/null
tar -xzf libevent-1.4.14b-stable.tar.gz
cd /var/opt/libevent-1.4.14b-stable
st_runner "sh ./configure --prefix=/usr" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null
rm -f -r /var/opt/libevent*
cd /var/opt
wget -U iCab http://www.monkey.org/~provos/libevent-1.4.14b-stable.tar.gz &> /dev/null
tar -xzf libevent-1.4.14b-stable.tar.gz
cd /var/opt/libevent-1.4.14b-stable
st_runner "sh ./configure" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null
st_runner "ldconfig" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing PHP-FPM"
msg "`date` NOTE: This step can take longer than 8 minutes (depending on your server speed), please wait..."
mrun "sleep 3"
cd /var/opt
rm -f -r /var/opt/php*
mv -f /etc/init.d/php-fpm /var/backups/php-fpm-pre-$_INSTALLER_VERSION
rm -f /etc/init.d/php-fpm*
wget -U iCab http://www.php.net/distributions/php-5.2.14.tar.gz &> /dev/null
wget -U iCab http://download.suhosin.org/suhosin-patch-5.2.14-0.9.7.patch.gz &> /dev/null
wget -U iCab http://php-fpm.org/downloads/php-5.2.14-fpm-0.5.14.diff.gz &> /dev/null
tar -xzf php-5.2.14.tar.gz
gunzip php-5.2.14-fpm-0.5.14.diff.gz
gunzip suhosin-patch-5.2.14-0.9.7.patch.gz
cat php-5.2.14-fpm-0.5.14.diff | patch -d php-5.2.14 -p1 &> /dev/null
cat suhosin-patch-5.2.14-0.9.7.patch | patch -d php-5.2.14 -p1 &> /dev/null
msg "`date` INFO: Installing PHP-FPM part 1/3"
mrun "sleep 3"
cd /var/opt/php-5.2.14
st_runner "sh ./buildconf --force" 2> /dev/null
msg "`date` INFO: Installing PHP-FPM part 2/3"
mrun "sleep 3"
st_runner "sh ./configure --quiet --enable-fpm --enable-fastcgi --with-mysql --with-mysqli --enable-force-cgi-redirect --enable-discard-path --with-zlib --with-curl --with-curlwrappers --with-gd --enable-gd-native-ttf --with-jpeg-dir=/usr --with-png-dir=/usr --with-freetype-dir=/usr --with-t1lib=/usr --with-pear --with-imap --with-imap-ssl --with-openssl --with-pdo-mysql --enable-exif --enable-soap --enable-ftp --enable-mbstring --enable-pcntl --enable-bcmath --with-kerberos --with-xsl --with-mcrypt" 2> /dev/null
msg "`date` INFO: Installing PHP-FPM part 3/3"
mrun "sleep 3"
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null
ln -s /usr/local/sbin/php-fpm /etc/init.d/php-fpm
perl -p -i -e "s/(php_fpm_CONF\")/php_fpm_CONF -c \/opt\/etc\/php.ini\"/g" /usr/local/sbin/php-fpm
perl -p -i -e "s/(\/usr\/local\/etc\/php-fpm.conf)/\/opt\/etc\/php-fpm.conf/g" /usr/local/sbin/php-fpm
perl -p -i -e "s/(\/usr\/local\/logs\/php-fpm.pid)/\/var\/run\/php-fpm.pid/g" /usr/local/sbin/php-fpm


###--------------------###
msg "`date` INFO: Installing memcache for php, please wait..."
mrun "sleep 3"
cd /var/opt
wget -U iCab http://pecl.php.net/get/memcache-3.0.3.tgz &> /dev/null
tar -xzf memcache-3.0.3.tgz
cd /var/opt/memcache-3.0.3
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing suhosin for php, please wait..."
mrun "sleep 3"
cd /var/opt
wget -U iCab http://download.suhosin.org/suhosin-0.9.31.tgz &> /dev/null
tar -xzf suhosin-0.9.31.tgz
cd /var/opt/suhosin-0.9.31
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing uploadprogress for php, please wait..."
mrun "sleep 3"
cd /var/opt
wget -U iCab http://pecl.php.net/get/uploadprogress-1.0.1.tgz &> /dev/null
tar -xzf uploadprogress-1.0.1.tgz
cd /var/opt/uploadprogress-1.0.1
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
msg "`date` INFO: Installing apc for php, please wait..."
mrun "sleep 3"
cd /var/opt
wget -U iCab http://pecl.php.net/get/APC-3.1.3p1.tgz &> /dev/null
tar -xzf APC-3.1.3p1.tgz
cd /var/opt/APC-3.1.3p1
st_runner "/usr/local/bin/phpize" 2> /dev/null
st_runner "sh ./configure --with-php-config=/usr/local/bin/php-config" 2> /dev/null
st_runner "make --quiet" 2> /dev/null
st_runner "make --quiet install" 2> /dev/null


###--------------------###
mkdir -p /usr/local/ioncube
_X86_64_TEST=`uname -m`
if [ "$_X86_64_TEST" = "x86_64" ] ; then
  SYSTEMARCH="x86_64"
  msg "`date` INFO: Installing ioncube $SYSTEMARCH version for php, please wait..."
  mrun "sleep 3"
  cd /var/opt
wget -U iCab http://downloads2.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz &> /dev/null
tar -xzf ioncube_loaders_lin_x86-64.tar.gz
else
  SYSTEMARCH="x86"
  msg "`date` INFO: Installing ioncube $SYSTEMARCH version for php, please wait..."
  mrun "sleep 3"
  cd /var/opt
wget -U iCab http://downloads2.ioncube.com/loader_downloads/ioncube_loaders_lin_x86.tar.gz &> /dev/null
tar -xzf ioncube_loaders_lin_x86.tar.gz
fi
cp -af /var/opt/ioncube/* /usr/local/ioncube/

###
fi ### end if [ $_PHP_INSTALL_REQUIRED = "YES" ] ; then
###


###--------------------###
if [ ! -f "/usr/bin/bzr" ] ; then
  msg "`date` INFO: Installing bzr, please wait..."
  mrun "sleep 3"
  cd /var/opt
  wget -U iCab http://launchpad.net/bzr/2.2/2.2b4/+download/bzr-2.2b4.tar.gz &> /dev/null
  tar -xzf bzr-2.2b4.tar.gz
  cd /var/opt/bzr-2.2b4
  st_runner "python setup.py --quiet install build_ext --allow-python-fallback" 2> /dev/null
fi


###--------------------###
msg "`date` INFO: Nginx version test, please wait..."
mrun "sleep 3"
if [ $_STATUS = "INIT" ] ; then
  _NGINX_INSTALL_REQUIRED=YES
fi
if [ -f "/usr/sbin/nginx" ] ; then
  _NGINX_F_INSTALLED=`/usr/sbin/nginx -v 2>&1`
  _NGINX_F_INSTALLED=`echo -n $_NGINX_F_INSTALLED | tr -d "\n"`
  _NGINX_F_VERSION="nginx version: nginx/$_NGINX_VERSION"
  if [ "$_NGINX_F_INSTALLED" = "$_NGINX_F_VERSION" ] ; then
    _NGINX_INSTALL_REQUIRED=NO
    msg "`date` INFO: Installed $_NGINX_F_INSTALLED, no upgrade required"
  else
    _NGINX_INSTALL_REQUIRED=YES
    msg "`date` INFO: Installed $_NGINX_F_INSTALLED, upgrade required"
  fi
  mrun "sleep 3"
fi


###--------------------###
if [ $_NGINX_INSTALL_REQUIRED = "YES" ] ; then
  msg "`date` INFO: Install/upgrade Nginx, please wait..."
  mrun "sleep 3"
  cd /var/opt; rm -f -r nginx*
  git clone git://github.com/masterzen/nginx-upload-progress-module.git &> /dev/null
  cd /var/opt
  wget -U iCab http://sysoev.ru/nginx/nginx-$_NGINX_VERSION.tar.gz &> /dev/null
  tar -xzf nginx-$_NGINX_VERSION.tar.gz
  cd /var/opt/nginx-$_NGINX_VERSION
  st_runner "sh ./configure --prefix=/usr --sbin-path=/usr/sbin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/lock/nginx.lock --user=www-data --group=www-data --with-http_realip_module --with-rtsig_module --with-http_gzip_static_module --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --add-module=/var/opt/nginx-upload-progress-module/" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
fi
if [ ! -L "/usr/bin/nginx" ] ; then
  ln -s /usr/sbin/nginx /usr/bin/nginx
fi


###--------------------###
if [ ! -f "/usr/local/bin/memcached" ] ; then
  msg "`date` INFO: Installing Memcached, please wait..."
  mrun "sleep 3"
  cd /var/opt
  rm -f /opt/bin/memcached
  rm -f /usr/bin/memcached
  rm -f /usr/local/bin/memcached
  wget -U iCab http://memcached.googlecode.com/files/memcached-1.4.5.tar.gz &> /dev/null
  tar -xzf memcached-1.4.5.tar.gz
  cd /var/opt/memcached-1.4.5
  st_runner "sh ./configure" 2> /dev/null
  st_runner "make --quiet" 2> /dev/null
  st_runner "make --quiet install" 2> /dev/null
  ln -s /usr/local/bin/memcached /usr/bin/memcached
fi


###--------------------###
if [ ! -f "/usr/bin/lshell" ] ; then
  msg "`date` INFO: Installing lshell, please wait..."
  mrun "sleep 3"
  cd /var/opt
  wget -U iCab http://garr.dl.sourceforge.net/project/lshell/lshell/0.9.12/lshell-0.9.12.tar.gz &> /dev/null
  #wget -U iCab https://sourceforge.net/projects/lshell/files/lshell/0.9.12/lshell-0.9.12.tar.gz/download &> /dev/null
  tar -xzf lshell-0.9.12.tar.gz
  cd /var/opt/lshell-0.9.12
  runner "python setup.py install" 2> /dev/null
  addgroup lshellg &> /dev/null
  mkdir -p /var/log/lsh
  chown :lshellg /var/log/lsh
  chmod 770 /var/log/lsh
  cd /etc
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/lshell.conf.txt ./
  mv -f lshell.conf lshell.conf-orig &> /dev/null
  mv -f lshell.conf.txt lshell.conf &> /dev/null
  echo "/usr/bin/lshell" >> /etc/shells
fi


###--------------------###
if [ ! -f "/usr/local/sbin/pure-config.pl" ] ; then
  msg "`date` INFO: Installing Pure-FTPd, please wait..."
  mrun "sleep 3"
  echo "/bin/false" >> /etc/shells
  echo "/bin/true" >> /etc/shells
  mkdir -p /etc/ssl/private/
  rm -f /etc/ssl/private/pure-ftpd.pem
  rm -f /usr/local/sbin/pure-ftpd
  st_runner "openssl req -x509 -nodes -days 7300 -newkey rsa:2048 -keyout /etc/ssl/private/pure-ftpd.pem -out /etc/ssl/private/pure-ftpd.pem -batch" 2> /dev/null
  chmod 600 /etc/ssl/private/pure-ftpd.pem
  cd /var/opt
  mkdir -p /usr/local/etc
  rm -f -r pure-ftpd*
  wget -U iCab http://download.pureftpd.org/pub/pure-ftpd/releases/pure-ftpd-1.0.29.tar.gz &> /dev/null
  tar -xzf pure-ftpd-1.0.29.tar.gz
  cd pure-ftpd-1.0.29
  st_runner "sh ./configure --with-everything --with-virtualchroot --without-humor --with-tls --with-diraliases --with-pam --with-certfile=/etc/ssl/private/pure-ftpd.pem" 2> /dev/null
  st_runner "make install-strip" 2> /dev/null
  cd /usr/local/sbin/
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/pure-config.pl.txt ./
  mv -f pure-config.pl.txt pure-config.pl &> /dev/null
  chmod 755 /usr/local/sbin/pure-config.pl
  cp -f /var/opt/pure-ftpd-1.0.29/pam/pure-ftpd /etc/pam.d/
  cd /usr/local/etc
  rm -f pure-ftpd.conf
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/pure-ftpd.conf ./
  mrun "sleep 3"
  st_runner "/usr/local/sbin/pure-config.pl /usr/local/etc/pure-ftpd.conf" &> /dev/null
  cd /var/opt
fi


###--------------------###
if [ $_STATUS = "INIT" ] ; then
  msg "`date` INFO: Update rc.d"
  mrun "sleep 3"
  chown root:crontab /var/spool/cron/crontabs/root &> /dev/null
  chmod 600 /var/spool/cron/crontabs/root &> /dev/null
  echo "UseDNS no" >> /etc/ssh/sshd_config
  #cp -a /opt/etc/php.ini /usr/local/lib/
  rm -f /usr/local/lib/php.ini
  chmod 700 /usr/local/sbin/php-fpm
  if [ ! -f "/var/run/aegir_upgrade.pid" ] ; then
    killall nginx php-cgi php-fpm &> /dev/null
    runner "invoke-rc.d ssh restart" &> /dev/null
    runner "update-rc.d cron defaults" &> /dev/null
    runner "update-rc.d php-fpm defaults" &> /dev/null
    runner "update-rc.d nginx defaults" &> /dev/null
    runner "invoke-rc.d php-fpm start" 2> /dev/null
    runner "invoke-rc.d nginx start" 2> /dev/null
  fi
  cd /etc/mysql
  mv -f my.cnf my.cnf.bak.copy &> /dev/null
  cp -af /opt/tmp/nginx-for-drupal/aegir/conf/my.cnf.txt ./
  mv -f my.cnf.txt my.cnf &> /dev/null
  runner "invoke-rc.d mysql restart" 2> /dev/null
else
  if [ ! -f "/var/run/aegir_upgrade.pid" ] ; then
    msg "`date` INFO: Restarting php-fpm and Nginx"
    mrun "sleep 3"
    killall nginx php-cgi php-fpm &> /dev/null
    runner "invoke-rc.d php-fpm start" 2> /dev/null
    runner "invoke-rc.d nginx start" 2> /dev/null
  fi
fi


###--------------------###
if [ ! -f "/root/.my.pass.txt" ] ; then
  msg "`date` INFO: Generate random password for MariaDB"
  mrun "sleep 3"
  touch /root/.my.pass.txt
  chmod 0600 /root/.my.pass.txt
  pwgen -c -v -s > /root/.my.pass.txt
fi
if [ -f "/root/.my.pass.txt" ] ; then
  PXSWD=`cat /root/.my.pass.txt`
  PASWD=`echo -n $PXSWD | tr -d "\n"`
  for Files in `find /var/xdrago -type f`
  do
    perl -p -i -e "s/(NdKBu34erty325r6mUHxWy)/$PASWD/g" $Files
    perl -p -i -e "s/(php-fpm nginx php)/php-fpm php-cgi nginx php/g" $Files
  done
  msg "`date` INFO: OS and services installation/upgrade completed"
  mrun "sleep 3"
else
  msg "EXIT on error due to not found file with your MySQL/MariaDB root password."
cat <<EOF
  
  It appears you don't have required file with your root sql password.
  Create this file first and run this script again:
  
    echo "your_SQL_ROOT_password" > /root/.my.pass.txt
    chmod 0600 /root/.my.pass.txt
    
EOF
  msg "EXIT on error due to not found file with your MySQL/MariaDB root password."
  echo " "
  exit 1
fi


###
if [ $_STATUS = "INIT" ] ; then
###

###--------------------###
msg "`date` INFO: Installing core Aegir Hostmaster instance, please wait..."
mrun "sleep 3"
runner "adduser --system --group --home /var/aegir aegir"
runner "adduser aegir www-data"
echo "aegir ALL=NOPASSWD: /etc/init.d/nginx" >> /etc/sudoers
ln -s /var/aegir/config/nginx.conf /etc/nginx/conf.d/aegir.conf
cd /var/aegir
if [ "$_AEGIR_VERSION" = "HEAD" ] ; then
  _AEGIR_SCRIPT="aegir-head-install"
elif [ "$_AEGIR_VERSION" = "TEST" ] ; then
  _AEGIR_SCRIPT="aegir-test-install"
else
  _AEGIR_SCRIPT="aegir-alpha-install"
fi
cp -af /opt/tmp/nginx-for-drupal/aegir/scripts/$_AEGIR_SCRIPT.sh.txt ./
msg "`date` INFO: Now running Aegir installer for backend and frontend, please wait..."
mrun "sleep 3"
su -s /bin/bash aegir -c "bash $_AEGIR_SCRIPT.sh.txt $_THIS_FRONT --http_service_type='nginx' --db_service_type='mysql' --db_port='3306' --client_email='$_MY_EMAIL' >/var/aegir/install.log 2>&1"
mrun "sleep 3"


###--------------------###
msg "`date` INFO: Simple check if core Aegir Hostmaster instance install is successful"
mrun "sleep 3"
if [ -f "/var/aegir/config/includes/nginx_advanced_include.conf" ] ; then
  msg "`date` INFO: Aegir installation almost completed"
else
  msg "`date` FATAL ERROR: Something is wrong, core Aegir Hostmaster instance not installed - exit now"
  msg "`date` FATAL ERROR: Please check /var/aegir/install.log for more information on errors occured"
  exit 1
fi


###--------------------###
msg "`date` INFO: Fix for access to global.inc for www-data user issue"
mrun "sleep 3"
chmod 755 /var/aegir/config/includes
chmod 755 /var/aegir/config
mrun "sleep 3"


###--------------------###
msg "`date` INFO: Fix for advanced Nginx config and Drush path"
mrun "sleep 3"
ln -s /var/aegir/drush/drush /usr/bin/drush
cd /var/aegir/config/includes
mv -f global.inc global.inc-pre-$_INSTALLER_VERSION
cp -af /opt/tmp/nginx-for-drupal/aegir/conf/global.inc.aegir.txt ./
mv -f global.inc.aegir.txt global.inc
mv -f nginx_simple_include.conf nginx_simple_include.conf.orig
ln -s nginx_advanced_include.conf nginx_simple_include.conf
cd /var/aegir
if [ ! -f "/var/aegir/config/server_master/nginx/conf.d/custom_nginx.conf" ] ; then
  echo "  gzip_static       on;" > /var/aegir/config/server_master/nginx/conf.d/custom_nginx.conf
  echo "  upload_progress uploads 1m;" >> /var/aegir/config/server_master/nginx/conf.d/custom_nginx.conf
fi
perl -p -i -e "s/(access_log)/\#access_log/g" /etc/nginx/nginx.conf
perl -p -i -e "s/(worker_connections\s+1024)/worker_connections  4096/g" /etc/nginx/nginx.conf
perl -p -i -e "s/(worker_processes\s+1\;)/worker_processes  4\;\nworker_rlimit_nofile  8192\;/g" /etc/nginx/nginx.conf
rm -f /etc/nginx/sites-available/default
rm -f /etc/nginx/sites-enabled/default
if [ ! -f "/var/run/aegir_upgrade.pid" ] ; then
  killall nginx &> /dev/null
  runner "invoke-rc.d nginx start" 2> /dev/null
fi
mrun "sleep 3"
msg "`date` INFO: core Aegir Hostmaster instance installation completed"
mrun "sleep 3"
else
  echo " "
  if prompt_yes_no "Do you want to upgrade core Aegir Hostmaster instance?" ; then
    true
    mrun "sleep 3"
    msg "`date` INFO: Running core Aegir Hostmaster instance upgrade"
    mrun "sleep 3"
    rm -f /opt/tmp/testecho*
    invoke-rc.d cron stop &> /dev/null
    cd /var/aegir
    cp /opt/tmp/nginx-for-drupal/aegir/barracuda/AegirUpgrade.sh.txt ./
    perl -p -i -e "s/(EDIT_DOMAIN)/$_THIS_FRONT/g" /var/aegir/AegirUpgrade.sh.txt
    perl -p -i -e "s/(EDIT_AEGIR_VERSION)/$_AEGIR_VERSION/g" /var/aegir/AegirUpgrade.sh.txt
    perl -p -i -e "s/(EDIT_DRUSH_VERSION)/$_DRUSH_VERSION/g" /var/aegir/AegirUpgrade.sh.txt
    su -s /bin/bash aegir -c "/bin/bash AegirUpgrade.sh.txt"
    cd /var/aegir/config/includes
    mv -f global.inc global.inc-pre-$_INSTALLER_VERSION &> /dev/null
    cp -af /opt/tmp/nginx-for-drupal/aegir/conf/global.inc.aegir.txt ./
    mv -f global.inc.aegir.txt global.inc &> /dev/null
    cd /var/aegir
    rm -f AegirUpgrade.sh.txt    
    msg "`date` INFO: core Aegir Hostmaster instance upgrade completed"
  else
    msg "`date` INFO: core Aegir Hostmaster instance not upgraded this time"
    mrun "sleep 3"
  fi
###
fi ### end of if [ $_STATUS = "INIT" ] ; then
###


###--------------------###
if [ -f "/opt/tmp/nginx-for-drupal/aegir/conf/mime.types" ] ; then
msg "`date` INFO: Fix for mime types in Nginx, please wait..."
mrun "sleep 3"
  cd /etc/nginx
  mv -f mime.types mime.types-pre-$_INSTALLER_VERSION &> /dev/null
  cp /opt/tmp/nginx-for-drupal/aegir/conf/mime.types ./ &> /dev/null
  cd /var/www/nginx-default
  cp -f /opt/tmp/nginx-for-drupal/aegir/conf/uc.html ./ &> /dev/null
  cp -f /opt/tmp/nginx-for-drupal/aegir/conf/under_construction.jpg ./ &> /dev/null
  mv -f index.html index.html-pre-$_INSTALLER_VERSION &> /dev/null
  mv -f uc.html index.html &> /dev/null
  if [ ! -f "/var/run/aegir_upgrade.pid" ] ; then
    killall nginx &> /dev/null
    runner "invoke-rc.d nginx start" 2> /dev/null
  fi
fi


###--------------------###
if [ ! -f "/var/aegir/config/server_master/nginx/conf.d/nginx_wild_ssl.conf" ] ; then
  msg "`date` INFO: Installing default SSL Wildcard Nginx Proxy, please wait..."
  mrun "sleep 3"
  _HTTPS_TEST=`netstat -lnW | grep :443 2>&1`
  if [[ $_HTTPS_TEST =~ 443 ]] ; then
    _HTTPS_TEST=EXIST
  msg "WARNING!"
cat <<EOF
  
  We can't enable Wildcard HTTPS Proxy for all your hosted sites,
  including all Hostmaster instances, because you have already
  enabled SSL on the IP address used by your core Hostmaster instance.
  
  If you wish to use provided now by Barracuda Wildcard HTTPS Proxy,
  please disable the SSL you enabled, or use the built-in Aegir SSL
  feature on another IP address available and not used by the Hostmaster,
  and other hosted sites.
  
  We will continue in 30 seconds...
  
EOF
mrun "sleep 30"
  else
    _HTTPS_TEST=FREE
    if [ -z "$_THISHTIP" ] ; then
      _THISHTIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
    fi
    openssl req -x509 -nodes -days 7300 -subj '/C=US/ST=New York/O=Aegir/OU=Cloud/L=New York/CN=*.$_THISHOST' -newkey rsa:2048 -keyout /etc/ssl/private/nginx-wild-ssl.key -out /etc/ssl/private/nginx-wild-ssl.crt -batch 2> /dev/null
    cd /var/aegir/config/server_master/nginx/conf.d
    cp -a /opt/tmp/nginx-for-drupal/aegir/conf/nginx_wild_ssl.conf ./ &> /dev/null
    perl -p -i -e "s/127.0.0.1/$_THISHTIP/g" /var/aegir/config/server_master/nginx/conf.d/nginx_wild_ssl.conf &> /dev/null
    if [ -f "/opt/tmp/nginx-for-drupal/aegir/conf/global.inc.ssl.aegir.txt" ] ; then
      cd /var/aegir/config/includes
      cp -af /opt/tmp/nginx-for-drupal/aegir/conf/global.inc.ssl.aegir.txt ./ &> /dev/null
      mv -f global.inc global.inc-pre-$_INSTALLER_VERSION &> /dev/null
      mv -f global.inc.ssl.aegir.txt global.inc &> /dev/null
    fi
    if [ ! -f "/var/run/aegir_upgrade.pid" ] ; then
      killall nginx &> /dev/null
      runner "invoke-rc.d nginx start" 2> /dev/null
    fi
  fi
fi


###--------------------###
if [ ! -d "/opt/solr" ] ; then
  echo " "
  if prompt_yes_no "Do you want to install MultiCore Apache Solr Tomcat?" ; then
    true
    msg "`date` INFO: Installing MultiCore Apache Solr Tomcat, please wait..."
    mrun "sleep 3"
    cd /var/opt
    rm -f -r apachesolr*
    rm -f -r /opt/solr
    rm -f -r /opt/tomcat6
    wget -U iCab http://omega8.cc/dev/apachesolr.tar.gz &> /dev/null
    tar -xzf apachesolr.tar.gz
    cd apachesolr
    mv -f tomcat /etc/init.d/
    mv -f solr /opt/
    mv -f tomcat6 /opt/
    echo "ENABLED=1" > /etc/default/tomcat
    perl -p -i -e "s/(\/usr\/lib\/jvm\/java-6-sun\/jre)/\/usr\/lib\/jvm\/java-6-openjdk\/jre/g" /etc/init.d/tomcat
    runner "update-rc.d tomcat defaults" &> /dev/null
    runner "invoke-rc.d tomcat start" 2> /dev/null
    msg "`date` INFO: MultiCore Apache Solr Tomcat installation completed"
    mrun "sleep 2"
  else
    msg "`date` INFO: MultiCore Apache Solr Tomcat installation skipped"
    mrun "sleep 2"
  fi
fi


###--------------------###
if [ ! -d "/var/www/chive" ] ; then
  echo " "
  if prompt_yes_no "Do you want to install Chive MariaDB Manager?" ; then
    true
    msg "`date` INFO: Installing Chive MariaDB Manager, please wait..."
    mrun "sleep 3"
    cd /var/www
    wget -U iCab http://launchpad.net/chive/trunk/0.3.0/+download/chive_0.3.0.tar.gz &> /dev/null
    tar -xzf chive_0.3.0.tar.gz
    rm -f chive_0.3.0.tar.gz
    chown -R www-data:www-data /var/www/chive
    _CHIVE_VHOST="/var/aegir/config/server_master/nginx/vhost.d/db.$_THIS_FRONT"
    if [ -z "$_THISHTIP" ] ; then
      _THISHTIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
    fi
    echo " " >> $_CHIVE_VHOST
    echo "server {" >> $_CHIVE_VHOST
    echo "   include      /var/aegir/config/includes/fastcgi_params.conf;" >> $_CHIVE_VHOST
    echo "   limit_conn   gulag 10;" >> $_CHIVE_VHOST
    echo "   listen       $_THISHTIP:80;" >> $_CHIVE_VHOST
    echo "   server_name  db.$_THIS_FRONT;" >> $_CHIVE_VHOST
    echo "   root         /var/www/chive;" >> $_CHIVE_VHOST
    echo "   index        index.php index.html;" >> $_CHIVE_VHOST
    echo "   include      /var/aegir/config/includes/nginx_simple_include.conf;" >> $_CHIVE_VHOST
    echo "}" >> $_CHIVE_VHOST
    echo " " >> $_CHIVE_VHOST
    msg "`date` INFO: Chive MariaDB Manager installation completed"
    mrun "sleep 2"
  else
    msg "`date` INFO: Chive MariaDB Manager installation skipped"
    mrun "sleep 2"
  fi
fi


###--------------------###
if [ ! -d "/var/www/cgp" ] ; then
  echo " "
  if prompt_yes_no "Do you want to install Collectd Graph Panel?" ; then
    true
    msg "`date` INFO: Installing Collectd Graph Panel, please wait..."
    mrun "sleep 3"
    runner "aptitude -y install collectd"
    cd /var/www
    git clone http://git.nethuis.nl/pub/cgp.git &> /dev/null
    perl -p -i -e "s/(>uncategorized<)/>Barracuda Server</g" /var/www/cgp/index.php
    chown -R www-data:www-data /var/www/cgp
    _CGP_VHOST="/var/aegir/config/server_master/nginx/vhost.d/cgp.$_THIS_FRONT"
    if [ -z "$_THISHTIP" ] ; then
      _THISHTIP=`host $_THISHOST | cut -d: -f2 | awk '{ print $4}'`
    fi
    echo " " >> $_CGP_VHOST
    echo "server {" >> $_CGP_VHOST
    echo "   include      /var/aegir/config/includes/fastcgi_params.conf;" >> $_CGP_VHOST
    echo "   limit_conn   gulag 10;" >> $_CGP_VHOST
    echo "   listen       $_THISHTIP:80;" >> $_CGP_VHOST
    echo "   server_name  cgp.$_THIS_FRONT;" >> $_CGP_VHOST
    echo "   root         /var/www/cgp;" >> $_CGP_VHOST
    echo "   index        index.php index.html;" >> $_CGP_VHOST
    echo "   include      /var/aegir/config/includes/nginx_simple_include.conf;" >> $_CGP_VHOST
    echo "}" >> $_CGP_VHOST
    echo " " >> $_CGP_VHOST
    msg "`date` INFO: Collectd Graph Panel installation completed"
    mrun "sleep 2"
  else
    msg "`date` INFO: Collectd Graph Panel installation skipped"
    mrun "sleep 2"
  fi
fi


###--------------------###
if [ ! -f "/root/.my.cnf" ] ; then
msg "`date` INFO: MariaDB final setup"
mrun "sleep 3"
echo " "
msg "Please COPY it NOW and set it as your MariaDB root password during mysql_secure_installation"
echo " "
echo --------vvvvvvvv--------
echo ------- $PASWD -------
echo --------^^^^^^^^--------
echo " "
msg "Please remember, you don't have the root password for MariaDB set yet."
cat <<EOF

 * You have to hit Enter _without_ entering the password on the first question you will see.
 * On the second question say Y and then enter your root password '$PASWD' twice.
 * Then say Y on all remaining questions.

EOF
echo " "
msg "...waiting now 30 sec before running interactive mysql_secure_installation..."
echo " "
echo " "
mrun "sleep 30"
mysql_secure_installation
mrun "sleep 3"
echo "[client]" >> /root/.my.cnf
echo "user=root" >> /root/.my.cnf
echo "password=$PASWD" >> /root/.my.cnf
chmod 0600 /root/.my.cnf
msg "`date` INFO: MariaDB setup completed"
msg "`date` INFO: You can now log in as root by typing only 'mysql' on the command line"
fi ### end of if [ ! -f "/root/.my.cnf" ] ; then


###--------------------###
mrun "sleep 3"
if [ $_STATUS = "INIT" ] ; then
  echo " "
  _AEGIR__LOGIN_URL=`grep "Aegir is now installed" /var/aegir/install.log 2> /dev/null`
  msg "ACCESS -> $_AEGIR__LOGIN_URL"
  echo " "
  mrun "sleep 3"
fi
cd /var/aegir/config/includes
echo "`date` / `lsb_release -si`.`lsb_release -sc` `uname -m` / Aegir $_AEGIR_VERSION / Barracuda $_INSTALLER_VERSION / Nginx $_NGINX_VERSION / PHP $_PHP_VERSION" >> ./barracuda_log.txt
touch installer_version.txt
msg "`date` CARD: Now charging your credit card for this automated install/upgrade service..."
mrun "sleep 3"
msg "`date` JOKE: Just kidding! Enjoy your Aegir Hosting System :)"
mrun "sleep 3"
rm -f -r /var/opt/*
rm -f -r /opt/tmp/*
runner "invoke-rc.d php-fpm restart" 2> /dev/null
runner "invoke-rc.d cron start" &> /dev/null
msg "`date` BYE!"
exit 0


###----------------------------------------###
###
###  Barracuda Aegir Installer
###  Copyright 2010 Omega8.cc
###  noc@omega8.cc www.omega8.cc
###
###----------------------------------------###
